{"ast":null,"code":"import * as React from \"react\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport \"intersection-observer\"; // For IE\n\nconst baseOption = {\n  root: null,\n  // 부모가 되는 element\n  threshold: 0.5,\n  // 겹치는 정도.\n  rootMargin: \"0px\" // rootMargin 이 있으면, threshold 계산할 때, rootMargin 영역 만큼 더 계산.\n\n};\n\nconst useInterSection = (onIntersect, option) => {\n  const [ref, setRef] = useState(null);\n  const checkIntersect = useCallback(([entry], observer) => {\n    if (entry.isIntersecting) {\n      onIntersect(entry, observer);\n    }\n  }, []);\n  useEffect(() => {\n    let observer;\n\n    if (ref) {\n      observer = new IntersectionObserver(checkIntersect, { ...baseOption,\n        ...option\n      });\n      observer.observe(ref);\n    }\n\n    return () => observer && observer.disconnect();\n  }, [ref, option.root, option.threshold, option.rootMargin, checkIntersect]);\n  return [ref, setRef];\n};\n\nexport default useInterSection;","map":{"version":3,"sources":["/Users/maktb/DEV/photo-feed/src/hooks/useIntersection.js"],"names":["React","useState","useEffect","useCallback","baseOption","root","threshold","rootMargin","useInterSection","onIntersect","option","ref","setRef","checkIntersect","entry","observer","isIntersecting","IntersectionObserver","observe","disconnect"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;AACA,OAAO,uBAAP,C,CAAgC;;AAEhC,MAAMC,UAAU,GAAG;AACjBC,EAAAA,IAAI,EAAE,IADW;AACL;AACZC,EAAAA,SAAS,EAAE,GAFM;AAED;AAChBC,EAAAA,UAAU,EAAE,KAHK,CAGC;;AAHD,CAAnB;;AAMA,MAAMC,eAAe,GAAG,CAACC,WAAD,EAAcC,MAAd,KAAyB;AAC/C,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBX,QAAQ,CAAC,IAAD,CAA9B;AACA,QAAMY,cAAc,GAAGV,WAAW,CAAC,CAAC,CAACW,KAAD,CAAD,EAAUC,QAAV,KAAuB;AACxD,QAAID,KAAK,CAACE,cAAV,EAA0B;AACxBP,MAAAA,WAAW,CAACK,KAAD,EAAQC,QAAR,CAAX;AACD;AACF,GAJiC,EAI/B,EAJ+B,CAAlC;AAKAb,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,QAAJ;;AACA,QAAIJ,GAAJ,EAAS;AACPI,MAAAA,QAAQ,GAAG,IAAIE,oBAAJ,CAAyBJ,cAAzB,EAAyC,EAClD,GAAGT,UAD+C;AAElD,WAAGM;AAF+C,OAAzC,CAAX;AAIAK,MAAAA,QAAQ,CAACG,OAAT,CAAiBP,GAAjB;AACD;;AACD,WAAO,MAAMI,QAAQ,IAAIA,QAAQ,CAACI,UAAT,EAAzB;AACD,GAVQ,EAUN,CAACR,GAAD,EAAMD,MAAM,CAACL,IAAb,EAAmBK,MAAM,CAACJ,SAA1B,EAAqCI,MAAM,CAACH,UAA5C,EAAwDM,cAAxD,CAVM,CAAT;AAWA,SAAO,CAACF,GAAD,EAAMC,MAAN,CAAP;AACD,CAnBD;;AAqBA,eAAeJ,eAAf","sourcesContent":["import * as React from \"react\";\nimport { useState, useEffect, useCallback } from \"react\";\nimport \"intersection-observer\"; // For IE\n\nconst baseOption = {\n  root: null, // 부모가 되는 element\n  threshold: 0.5, // 겹치는 정도.\n  rootMargin: \"0px\" // rootMargin 이 있으면, threshold 계산할 때, rootMargin 영역 만큼 더 계산.\n};\n\nconst useInterSection = (onIntersect, option) => {\n  const [ref, setRef] = useState(null);\n  const checkIntersect = useCallback(([entry], observer) => {\n    if (entry.isIntersecting) {\n      onIntersect(entry, observer);\n    }\n  }, []);\n  useEffect(() => {\n    let observer;\n    if (ref) {\n      observer = new IntersectionObserver(checkIntersect, {\n        ...baseOption,\n        ...option\n      });\n      observer.observe(ref);\n    }\n    return () => observer && observer.disconnect();\n  }, [ref, option.root, option.threshold, option.rootMargin, checkIntersect]);\n  return [ref, setRef];\n};\n\nexport default useInterSection;\n"]},"metadata":{},"sourceType":"module"}